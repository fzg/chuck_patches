diff -Naur chuck-1.3.5.2/src/chuck_compile.cpp chuck-1.3.5.2_mod/src/chuck_compile.cpp
--- chuck-1.3.5.2/src/chuck_compile.cpp	2015-10-21 11:04:45.000000000 +0200
+++ chuck-1.3.5.2_mod/src/chuck_compile.cpp	2016-12-15 01:55:33.785038712 +0100
@@ -38,6 +38,7 @@
 #include "ugen_xxx.h"
 #include "ugen_filter.h"
 #include "ugen_stk.h"
+#include "ugen_detune.h"
 #include "uana_xform.h"
 #include "uana_extract.h"
 #include "ulib_machine.h"
@@ -577,6 +578,11 @@
     EM_log( CK_LOG_SEVERE, "module extract..." );
     load_module( env, extract_query, "extract", "global" );
     
+
+    if( !load_module( env, detune_query, "detune", "global" ) ) goto error;
+    if( !load_module( env, mix_query, "mix", "global" ) ) goto error;
+
+
     // load
     EM_log( CK_LOG_SEVERE, "class 'machine'..." );
     if( !load_module( env, machine_query, "Machine", "global" ) ) goto error;
diff -Naur chuck-1.3.5.2/src/chuck_globals.cpp chuck-1.3.5.2_mod/src/chuck_globals.cpp
--- chuck-1.3.5.2/src/chuck_globals.cpp	2015-10-21 11:04:45.000000000 +0200
+++ chuck-1.3.5.2_mod/src/chuck_globals.cpp	2016-11-10 02:47:34.595673674 +0100
@@ -33,6 +33,7 @@
 #include "chuck_bbq.h"
 #include "chuck_errmsg.h"
 #include "ugen_stk.h"
+#include "ugen_detune.h"
 #include "ulib_std.h"
 #include "hidio_sdl.h"
 #include "chuck_io.h"
diff -Naur chuck-1.3.5.2/src/makefile chuck-1.3.5.2_mod/src/makefile
--- chuck-1.3.5.2/src/makefile	2015-10-21 11:04:45.000000000 +0200
+++ chuck-1.3.5.2_mod/src/makefile	2016-11-16 22:26:03.334766035 +0100
@@ -32,7 +32,7 @@
 CXX=g++
 LD=g++
 
-CFLAGS+=-I. -Ilo
+CFLAGS+=-I. -Ilo -lgmp
 
 ifneq ($(CHUCK_STAT),)
 CFLAGS+= -D__CHUCK_STAT_TRACK__
@@ -91,7 +91,7 @@
 	chuck_console.cpp chuck_globals.cpp chuck_io.cpp \
     digiio_rtaudio.cpp hidio_sdl.cpp \
 	midiio_rtmidi.cpp RtAudio/RtAudio.cpp rtmidi.cpp ugen_osc.cpp ugen_filter.cpp \
-	ugen_stk.cpp ugen_xxx.cpp ulib_machine.cpp ulib_math.cpp ulib_std.cpp \
+	ugen_stk.cpp ugen_xxx.cpp ugen_detune.cpp ulib_machine.cpp ulib_math.cpp ulib_std.cpp \
 	ulib_opsc.cpp ulib_regex.cpp util_buffers.cpp util_console.cpp \
 	util_string.cpp util_thread.cpp util_opsc.cpp util_serial.cpp \
 	util_hid.cpp uana_xform.cpp uana_extract.cpp
diff -Naur chuck-1.3.5.2/src/makefile.alsa chuck-1.3.5.2_mod/src/makefile.alsa
--- chuck-1.3.5.2/src/makefile.alsa	2015-10-21 11:04:45.000000000 +0200
+++ chuck-1.3.5.2_mod/src/makefile.alsa	2016-11-10 03:24:29.036315455 +0100
@@ -1,4 +1,4 @@
 
 CFLAGS+= -D__LINUX_ALSA__ -D__PLATFORM_LINUX__ -O3 -fno-strict-aliasing -D__CK_SNDFILE_NATIVE__
-LDFLAGS+= -lasound -lstdc++ -ldl -lm -lsndfile -lpthread
+LDFLAGS+= -lasound -lstdc++ -ldl -lm -lsndfile -lpthread -lgmp
 
diff -Naur chuck-1.3.5.2/src/makefile.audicle chuck-1.3.5.2_mod/src/makefile.audicle
--- chuck-1.3.5.2/src/makefile.audicle	2015-10-21 11:04:45.000000000 +0200
+++ chuck-1.3.5.2_mod/src/makefile.audicle	2016-11-10 03:11:39.658483998 +0100
@@ -32,7 +32,7 @@
 	rtaudio.o rtmidi.o ugen_osc.o ugen_filter.o ugen_stk.o ugen_xxx.o \
 	ulib_machine.o ulib_math.o ulib_std.o ulib_opsc.o util_buffers.o \
 	util_math.o util_network.o util_raw.o util_string.o util_thread.o \
-	util_xforms.o util_opsc.o util_console.o util_hid.o $(SF_OBJ)
+	util_xforms.o util_opsc.o util_console.o util_hid.o  ugen_detune.o $(SF_OBJ)
 
 chuck: $(OBJS)
 	$(CXX) -o chuck $(OBJS) $(LIBS)
diff -Naur chuck-1.3.5.2/src/makefile.rl chuck-1.3.5.2_mod/src/makefile.rl
--- chuck-1.3.5.2/src/makefile.rl	2015-10-21 11:04:45.000000000 +0200
+++ chuck-1.3.5.2_mod/src/makefile.rl	2016-11-10 02:46:47.507264182 +0100
@@ -34,7 +34,7 @@
 	chuck_compile.o chuck_dl.o chuck_oo.o chuck_lang.o chuck_ugen.o \
 	chuck_main.o chuck_otf.o chuck_stats.o chuck_bbq.o chuck_shell.o \
 	chuck_console.o chuck_globals.o digiio_rtaudio.o midiio_rtmidi.o \
-	rtaudio.o rtmidi.o ugen_osc.o ugen_filter.o ugen_stk.o ugen_xxx.o \
+	rtaudio.o rtmidi.o ugen_osc.o ugen_filter.o ugen_stk.o ugen_detune.o ugen_xxx.o \
 	ulib_machine.o ulib_math.o ulib_std.o ulib_opsc.o util_buffers.o \
 	util_console.o util_math.o util_network.o util_raw.o \
 	util_string.o util_thread.o util_xforms.o util_opsc.o $(SF_OBJ)
@@ -153,6 +153,9 @@
 ugen_stk.o: ugen_stk.h ugen_stk.cpp
 	$(CXX) $(FLAGS) ugen_stk.cpp
 
+ugen_detune.o: ugen_detune.h ugen_detune.cpp
+	$(CXX) $(FLAGS) ugen_detune.cpp
+
 ulib_machine.o: ulib_machine.h ulib_machine.cpp
 	$(CXX) $(FLAGS) ulib_machine.cpp
 
diff -Naur chuck-1.3.5.2/src/ugen_detune.cpp chuck-1.3.5.2_mod/src/ugen_detune.cpp
--- chuck-1.3.5.2/src/ugen_detune.cpp	1970-01-01 01:00:00.000000000 +0100
+++ chuck-1.3.5.2_mod/src/ugen_detune.cpp	2016-12-15 02:19:41.404640219 +0100
@@ -0,0 +1,382 @@
+#include "ugen_detune.h"
+#include "chuck_type.h"
+#include "util_math.h"
+#include "chuck_vm.h"
+#include "chuck_lang.h"
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <float.h>
+#include <limits.h>
+
+#include <stdio.h>
+#include <gmp.h>
+
+#include "ugen_stk.h"
+
+/*
+CK_DLL_CTOR( Detune_ctor );
+CK_DLL_DTOR( Detune_dtor );
+CK_DLL_TICK( Detune_tick );
+CK_DLL_PMSG( Detune_pmsg );
+CK_DLL_CTRL( Detune_ctrl_amount );
+CK_DLL_CGET( Detune_cget_amount );
+CK_DLL_CGET( Detune_cget_output );
+*/
+static t_CKUINT Detune_data = 0;
+static t_CKUINT Mix_data = 0;
+
+t_CKUINT _detg_srate = 0;
+
+static t_CKFLOAT g_radians_per_sample = 0;
+
+
+DLL_QUERY detune_query( Chuck_DL_Query * QUERY )
+{
+    Chuck_Env * env = Chuck_Env::instance();
+    Chuck_DL_Func * func = NULL;
+    _detg_srate = QUERY->srate;
+    g_radians_per_sample = TWO_PI / (t_CKFLOAT)_detg_srate;
+
+
+    if( !type_engine_import_ugen_begin( env, "Detune", "UGen", env->global(),
+                                        Detune_ctor, Detune_dtor,
+                                        Detune_tick, Detune_pmsg ) ) return FALSE;
+
+    Detune_data = type_engine_import_mvar ( env, "int", "@Detune_data", FALSE );
+    if( Detune_data == CK_INVALID_OFFSET ) goto error;
+
+    func = make_new_mfun("int", "i", Detune_ctrl_i) ;
+    func->add_arg( "int", "i" );
+    func->doc = "Oscillator index (0-6).";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+
+    func = make_new_mfun( "float", "det", Detune_ctrl_det ); //! set detune
+    func->add_arg( "float", "det" );
+    func->doc = "Detune amount (0-1).";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun("float", "freq", Detune_ctrl_freq) ;
+    func->add_arg( "float", "freq" );
+    func->doc = "Master frequency.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "det", Detune_cget_det ); //! get detune
+    func->doc = "Detune amount (0-1).";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d0", Detune_cget_d0 ); //! get output
+    func->doc = "Detune amount for osc 0.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d1", Detune_cget_d1 ); //! get output
+    func->doc = "Detune amount for osc 1.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d2", Detune_cget_d2 ); //! get output
+    func->doc = "Detune amount for osc 2.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d3", Detune_cget_d3 ); //! get output
+    func->doc = "Detune amount for osc 3.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d4", Detune_cget_d4 ); //! get output
+    func->doc = "Detune amount for osc 4.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d5", Detune_cget_d5 ); //! get output
+    func->doc = "Detune amount for osc 5.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "d6", Detune_cget_d6 ); //! get output
+    func->doc = "Detune amount for osc 6.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+
+
+    type_engine_import_class_end( env );
+    return TRUE;
+error:
+    type_engine_import_class_end( env );
+    return FALSE;
+}
+
+t_CKBOOL detune_detach( t_CKUINT type, void * data )
+{
+    return TRUE;
+}
+
+CK_DLL_CTOR( Detune_ctor )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    Chuck_DL_Return r;
+    SAFE_DELETE(d);
+
+    OBJ_MEMBER_UINT(SELF, Detune_data) = (t_CKUINT)new Detune;
+}
+
+CK_DLL_DTOR( Detune_dtor )
+{
+    delete (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    OBJ_MEMBER_UINT(SELF, Detune_data) = 0;
+}
+
+
+CK_DLL_TICK( Detune_tick )
+{
+    Chuck_UGen * ugen = (Chuck_UGen *)SELF;
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+
+    // if input
+//    if( ugen->m_num_src ) {
+//    *out = d->dodetune(in, d->i);
+//    ;}
+    // compute
+    return TRUE;
+}
+
+CK_DLL_PMSG( Detune_pmsg )
+{
+    return FALSE;
+}
+
+CK_DLL_CTRL( Detune_ctrl_i )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    d->i = GET_CK_INT(ARGS);
+    RETURN->v_int = (t_CKINT)d->i;
+}
+
+CK_DLL_CTRL( Detune_ctrl_freq )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    d->freq = GET_CK_FLOAT(ARGS);
+    RETURN->v_float = (t_CKINT)d->freq;
+
+}
+
+
+CK_DLL_CTRL( Detune_ctrl_det )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    d->det = GET_CK_FLOAT(ARGS);
+    RETURN->v_float = (t_CKFLOAT)d->det;
+}
+
+CK_DLL_CGET( Detune_cget_det )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->detune();
+}
+
+CK_DLL_CGET( Detune_cget_d0 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(0);
+}
+
+CK_DLL_CGET( Detune_cget_d1 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(1);
+}
+
+CK_DLL_CGET( Detune_cget_d2 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(2);
+}
+
+CK_DLL_CGET( Detune_cget_d3 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(3);
+}
+
+CK_DLL_CGET( Detune_cget_d4 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(4);
+}
+
+CK_DLL_CGET( Detune_cget_d5 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(5);
+}
+
+CK_DLL_CGET( Detune_cget_d6 )
+{
+    Detune * d = (Detune *)OBJ_MEMBER_UINT(SELF, Detune_data);
+    RETURN->v_float = (t_CKFLOAT)d->dodetune(6);
+}
+
+
+Detune :: Detune()
+{
+ adsr = new Envelope();
+  det = 1.f;
+}
+
+Detune :: ~Detune()
+{
+}
+
+
+// computes osc mix
+
+// computes detune factor
+MY_FLOAT Detune :: detune(void) const
+{
+  mpf_t in, tmp, acc, out, mul;
+  mpf_inits(in, mul, out, tmp, NULL);
+  mpf_set_d(in, det);
+  for (int i = 0; i < 12; ++i) {
+    mpf_inits(tmp, acc, NULL);
+    mpf_set_d(mul, F[i]);
+    mpf_pow_ui(tmp, in, 11);
+    mpf_mul(acc, tmp, mul);
+    mpf_add(out, out, acc);
+    mpf_clears(tmp, acc, NULL);
+  }
+
+  double o = mpf_get_d(out);
+  mpf_clears(in, out, mul, NULL);
+  return o;
+}
+
+// compute osc detune
+MY_FLOAT Detune :: dodetune(/*MY_FLOAT freq, */int osc) const
+{
+  MY_FLOAT freq = this->freq;
+  if (osc == 0) return freq;
+  MY_FLOAT f;
+  f = freq + (det_offsets[osc-1] * 1.f+ detune());
+  printf("\tdetune(%llg + (%llg * 1+det(%llg)): -> %llg\n", freq, det_offsets[osc-1], det, f);
+
+  return f;//req + (det_offsets[osc-1] * (1 + detune()));
+}
+
+
+// todo: make two routines, select the correct one setting one fptr
+// to save one branch
+float Mix :: domix_main() const
+{
+  MY_FLOAT factor;
+  factor = 0.99785 + (-0.55366 * this->mix);
+  return factor;
+}
+
+float Mix :: domix_other() const
+{
+  MY_FLOAT factor;
+  factor = 0.044372 + (1.2841 * this->mix)
+    + (-0.73764 * this->mix * this->mix);
+  return factor;
+}
+
+DLL_QUERY mix_query( Chuck_DL_Query * QUERY )
+{
+    Chuck_Env * env = Chuck_Env::instance();
+    Chuck_DL_Func * func = NULL;
+    g_radians_per_sample = TWO_PI / (t_CKFLOAT)_detg_srate;
+
+
+    if( !type_engine_import_ugen_begin( env, "Mix", "UGen", env->global(),
+                                        Mix_ctor, Mix_dtor,
+                                        Mix_tick, Mix_pmsg ) ) return FALSE;
+
+    Mix_data = type_engine_import_mvar ( env, "int", "@Mix_data", FALSE );
+    if( Mix_data == CK_INVALID_OFFSET ) goto error;
+
+
+    func = make_new_mfun( "float", "mix", Mix_ctrl_mix ); //! set mix amount
+    func->add_arg( "float", "mix" );
+    func->doc = "Mix amount (0-1).";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "mix", Mix_cget_mix ); //! get detune
+    func->doc = "Mix amount (0-1).";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "main", Mix_cget_main ); //! get detune
+    func->doc = "Main mix.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+    func = make_new_mfun( "float", "other", Mix_cget_other ); //! get detune
+    func->doc = "Other mix.";
+    if( !type_engine_import_mfun( env, func ) ) goto error;
+
+
+    type_engine_import_class_end( env );
+    return TRUE;
+  error:
+    type_engine_import_class_end( env );
+    return FALSE;
+}
+
+
+/////////////////////////////////////////////////////////////////////////
+///  STARTMIX
+
+CK_DLL_CTOR( Mix_ctor )
+{
+    Mix * x = (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+    Chuck_DL_Return r;
+    SAFE_DELETE(x);
+
+    OBJ_MEMBER_UINT(SELF, Mix_data) = (t_CKUINT)new Mix;
+}
+
+CK_DLL_DTOR( Mix_dtor )
+{
+    delete (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+    OBJ_MEMBER_UINT(SELF, Mix_data) = 0;
+}
+
+
+CK_DLL_TICK( Mix_tick )
+{
+//    Chuck_UGen * ugen = (Chuck_UGen *)SELF;
+//    Mix * d = (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+
+    // if input
+//    if( ugen->m_num_src ) {
+//    *out = d->domix(in, d->i);
+//    ;}
+    // compute
+    return TRUE;
+}
+
+CK_DLL_PMSG( Mix_pmsg )
+{
+    return FALSE;
+}
+
+CK_DLL_CTRL( Mix_ctrl_mix )
+{
+    Mix * d = (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+    d->mix = GET_CK_FLOAT(ARGS);
+    RETURN->v_float = (t_CKFLOAT)d->mix;
+}
+
+CK_DLL_CGET( Mix_cget_mix )
+{
+    Mix * d = (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+    RETURN->v_float = (t_CKFLOAT)d->mix;
+}
+
+CK_DLL_CGET( Mix_cget_main )
+{
+    Mix * d = (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+    RETURN->v_float = (t_CKFLOAT)d->domix_main();
+}
+
+CK_DLL_CGET( Mix_cget_other )
+{
+    Mix * d = (Mix *)OBJ_MEMBER_UINT(SELF, Mix_data);
+    RETURN->v_float = (t_CKFLOAT)d->domix_other();
+}
+
diff -Naur chuck-1.3.5.2/src/ugen_detune.h chuck-1.3.5.2_mod/src/ugen_detune.h
--- chuck-1.3.5.2/src/ugen_detune.h	1970-01-01 01:00:00.000000000 +0100
+++ chuck-1.3.5.2_mod/src/ugen_detune.h	2016-12-15 02:17:18.145114953 +0100
@@ -0,0 +1,93 @@
+#ifndef __UGEN_DETUNE_H__
+#define __UGEN_DETUNE_H__
+
+#include "chuck_dl.h"
+
+#include "ugen_stk.h"
+
+#define MY_FLOAT long double
+DLL_QUERY detune_query( Chuck_DL_Query * QUERY );
+//t_CKBOOL detune_detach ( t_CKUINT type, void * data);
+CK_DLL_CTOR( Detune_ctor );
+CK_DLL_DTOR( Detune_dtor );
+CK_DLL_TICK( Detune_tick );
+CK_DLL_PMSG( Detune_pmsg );
+
+CK_DLL_CTRL( Detune_ctrl_i );
+CK_DLL_CTRL( Detune_ctrl_freq );
+
+CK_DLL_CTRL( Detune_ctrl_det );
+CK_DLL_CGET( Detune_cget_det );
+CK_DLL_CGET( Detune_cget_d0 );
+CK_DLL_CGET( Detune_cget_d1 );
+CK_DLL_CGET( Detune_cget_d2 );
+CK_DLL_CGET( Detune_cget_d3 );
+CK_DLL_CGET( Detune_cget_d4 );
+CK_DLL_CGET( Detune_cget_d5 );
+CK_DLL_CGET( Detune_cget_d6 );
+
+extern t_CKUINT _detg_srate;
+
+MY_FLOAT randphase(void);
+
+class Detune
+{
+public:
+  Detune();
+  virtual ~Detune();
+  Envelope *adsr;
+
+  void setVelocity(MY_FLOAT);
+  void setFrequency(MY_FLOAT);
+  void noteOn(MY_FLOAT, MY_FLOAT);
+  void keyOff(void);
+  void noteOff(MY_FLOAT);
+
+  MY_FLOAT detune(void) const;
+  MY_FLOAT dodetune(/*MY_FLOAT, */int) const;
+  MY_FLOAT freq;
+  MY_FLOAT det = .1;
+  MY_FLOAT F[12] = {
+   0.0030115596, 0.6717417634, -24.1878824391, 404.2703938388,
+   -3425.0836591318, 17019.9518580080, -53046.9642751875, 
+   106649.6679158292, -138150.6761080548, 111363.4808729368, 
+   -50818.8652045924, 10028.7312891634
+  }; // detune polynominal factors
+  MY_FLOAT det_offsets[6] = {
+   -0.11002313, -0.06288439, -0.01952356,
+    0.01991221,0.06216538,0.10745242
+  };
+  int i;
+};
+
+
+/*
+ Mixer. TODO:
+  split into two ugens (main and other)
+
+*/
+
+class Mix {
+public:
+  Mix() {};
+  virtual ~Mix() {};
+  float domix_main() const;
+  float domix_other() const;
+
+  MY_FLOAT mix = .5;
+
+};
+
+
+DLL_QUERY mix_query( Chuck_DL_Query * QUERY );
+
+CK_DLL_CTOR( Mix_ctor );
+CK_DLL_DTOR( Mix_dtor );
+CK_DLL_TICK( Mix_tick );
+CK_DLL_PMSG( Mix_pmsg );
+CK_DLL_CTRL( Mix_ctrl_mix );
+CK_DLL_CGET( Mix_cget_mix );
+CK_DLL_CGET( Mix_cget_main );
+CK_DLL_CGET( Mix_cget_other );
+
+#endif
